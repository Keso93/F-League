# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:

    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Utils\\ParamConverter,DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # app/config/config.yml
    seralize_param_converter:
        class: App\Utils\ParamConverter\SerializedParamConverter
        autowire: true
        autoconfigure: false
        tags:
            - { name: request.param_converter, priority: -2, converter: seralize_param_converter }


    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Utils\Listener\ExceptionListener:
        arguments: ["@router"]
        tags:
            - { name: kernel.event_listener, event: kernel.exception }


    App\Utils\Listener\ImageRemoveNotifier:
        tags:
            - # these are the basic options that define the entity listener
                name: 'doctrine.entity_listener'
                event: 'postRemove'
                entity: 'App\Entity\Image'

                # set the 'lazy' option to TRUE to only instantiate listeners when they are used
                lazy: true

                # you can also associate an entity listener to a specific entity manager
                entity_manager: 'custom'

                # by default, Symfony looks for a method called after the event (e.g. postUpdate())
                # if it doesn't exist, it tries to execute the '__invoke()' method, but you can
                # configure a custom method name with the 'method' option
                method: 'postRemove'

    App\Utils\Listener\DatabaseActivitySubscriber:
        tags:
            - { name: 'doctrine.event_subscriber', connection: 'default' }




    App\Utils\Listener\ClubListener:
        arguments: ["@App\\Manager\\ClubManager", "@Symfony\\Component\\Security\\Core\\Security"]
        tags:
            - # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'postUpdate'




                # set the 'lazy' option to TRUE to only instantiate listeners when they are used
                lazy: true

                # you can also associate an entity listener to a specific entity manager

#                # by default, Symfony looks for a method called after the event (e.g. postUpdate())
#                # if it doesn't exist, it tries to execute the '__invoke()' method, but you can
#                # configure a custom method name with the 'method' option
#                method: 'checkClubChanges'

#    App\Manager\LocationManager: '@location.manager'

#    App\Utils\Normalizer\EntityNormalizer:
#        public: false
#        autowire: true
#        autoconfigure: true
#        tags:
#            - { name: serializer.normalizer }
